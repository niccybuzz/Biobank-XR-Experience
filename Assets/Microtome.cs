using Meta.WitAi;
using Oculus.Interaction;
using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;

public class Microtome : MonoBehaviour
{
    // The platform on which sample blocks are attached for slicing
    public SnapInteractable platform;

    /* 
     * When a slice is generated by the microtome, this field is required to get the image that will be displayed on the screen
     * Each block is spawned with a random image attached. Doing it this way ensures that every slice that is generated from the block has the same image attached.
    */
    private GameObject mostRecentBlockAttached;

    public GameObject MostRecentBlockAttached { get => mostRecentBlockAttached; set => mostRecentBlockAttached = value; }

    // Called every time a block is attached to the platform. Updates the most recent block attached
    public void AttachBlock()
    {
        mostRecentBlockAttached = GetBlockOnPlatform();
    }

    // Checks what is currently attached to the platform, and returns that game object
    public GameObject GetBlockOnPlatform()
    {
        GameObject blockOnPlatform = null;

        /* 
         * Although we are using a foreach here, only 1 selecting interactor is permitted on the platform, so only a single game object can be returned
         * This is because there is no method provided for accessing a single interactor
         */
        foreach (var selectingInteractor in platform.SelectingInteractors)
        {
            /*
             * Getting the parent gameobject (i.e. the actual slice)
             * Have to use Transform instead of gameobject to navigate through parent / child relationships
             */
            Transform block = selectingInteractor.gameObject.transform.parent;
            blockOnPlatform = block.gameObject;
        }

        return blockOnPlatform;
    }

    // Called whenever a correct match is made in challenge mode. Deletes the block currently on the platform
    public void ClearBlocksOnPlatform()
    {
        mostRecentBlockAttached.SetActive(false);
    }

}
